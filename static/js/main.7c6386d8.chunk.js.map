{"version":3,"sources":["features/todos/todosSlice.js","features/todos/TodoList.jsx","features/filter/TodoFilter.jsx","features/todos/Todo.jsx","components/loadState.js","components/App.js","index.js"],"names":["tasks","createSlice","name","initialState","allIds","byId","currentNameFilter","reducers","addTask","reducer","state","payload","id","prepare","text","_","uniqueId","deleteTask","filterAllIds","filter","item","getRidofTask","omit","toggleTask","complete","toggleFilter","updateText","action","extraReducers","actions","combineReducers","TodoList","dispatch","useDispatch","useSelector","currentFilter","listRef","useRef","handleToggle","e","preventDefault","handleDelete","filtered","i","className","ref","TransitionGroup","map","idx","CSSTransition","key","timeout","classNames","Fragment","data-testid","onClick","style","textDecoration","TodoFilter","activeFilter","filterList","transform","Todo","task","width","onSubmit","type","value","onChange","target","required","placeholder","aria-label","aria-describedby","loadState","serializedState","localStorage","getItem","JSON","parse","persistState","console","log","store","configureStore","rootReducer","preloadedState","subscribe","throttle","stringify","setItem","error","saveState","getState","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c6386d8.chunk.js","sourcesContent":["import { createSlice, combineReducers } from '@reduxjs/toolkit';\r\nimport _ from 'lodash';\r\n\r\nconst initialState = {\r\n    allIds: [],\r\n    byId: {},\r\n    currentNameFilter: 'all',\r\n};\r\n\r\nconst tasks = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        addTask: {\r\n            reducer: (state, { payload }) => {\r\n                // console.log(task); // надо передать {payload: {task}}\r\n                return {\r\n                    byId: { ...state.byId, [payload.id]: payload },\r\n                    allIds: [payload.id, ...state.allIds],\r\n                    currentNameFilter: state.currentNameFilter,\r\n                }\r\n            },\r\n            prepare: (text) => {\r\n                const id = _.uniqueId();\r\n                return { payload: { id, text, state: 'active' } }\r\n            }\r\n        },\r\n        deleteTask: (state, { payload: { id } }) => {\r\n            const filterAllIds = state.allIds.filter(item => item !== id);\r\n            const getRidofTask = _.omit(state.byId, id);\r\n            state.byId = getRidofTask;\r\n            state.allIds = filterAllIds;\r\n        },\r\n        toggleTask: (state, { payload: { id } }) => {\r\n            const complete = state.byId[id].state;\r\n            state.byId[id].state = complete === 'active' ? 'finished' : 'active';\r\n        },\r\n        toggleFilter: (state, { payload }) => { // изменить поле currentNameFilter\r\n            state.currentNameFilter = payload;\r\n        }\r\n    }\r\n});\r\n\r\nconst text = createSlice({\r\n    name: 'text',\r\n    initialState: '',\r\n    reducers: {\r\n        updateText: (state, action) => {\r\n            return action.payload;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [tasks.actions.addTask]: (state) => {\r\n            return '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addTask, deleteTask, toggleTask, toggleFilter } = tasks.actions;\r\nexport const { updateText } = text.actions;\r\n// export const { toggleFilter } = currentNameFilter.actions;\r\n\r\nexport default combineReducers({\r\n    tasks: tasks.reducer,\r\n    text: text.reducer,\r\n});\r\n\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleTask, deleteTask } from './todosSlice';\r\nimport {\r\n    CSSTransition,\r\n    TransitionGroup,\r\n} from 'react-transition-group';\r\nimport _ from 'lodash'\r\nimport '../../assets/todo-list.scss'\r\n\r\nconst TodoList = () => {\r\n    const dispatch = useDispatch();\r\n    const byId = useSelector(state => state.tasks.byId);\r\n    const allIds = useSelector(state => state.tasks.allIds);\r\n    const currentFilter = useSelector(state => state.tasks.currentNameFilter);\r\n    const listRef = useRef();\r\n\r\n\r\n    const handleToggle = (id) => (e) => {\r\n        e.preventDefault();\r\n        dispatch(toggleTask(id));\r\n    };\r\n    const handleDelete = (id) => () => {\r\n        dispatch(deleteTask(id));\r\n    };\r\n    const filtered = currentFilter === 'all' ? allIds : allIds.filter(i => {\r\n        return byId[i].state === currentFilter;\r\n    });\r\n\r\n    return (\r\n        <div className=\"mt-3\">\r\n            <ul ref={listRef} className=\"list-group todo-list\">\r\n                <TransitionGroup className=\"todo-list\">\r\n                    {filtered.map((idx) => {\r\n                        const { id, text, state } = byId[idx];\r\n                        return (\r\n                            <CSSTransition key={id}\r\n                                timeout={500}\r\n                                classNames=\"item\"\r\n                            >\r\n                                <React.Fragment key={_.uniqueId(id)}>\r\n                                    <li className=\"list-element d-flex\" data-testid=\"elements\">\r\n                                        <span className=\"mr-auto\">\r\n                                            <button className=\"btn btn-link\"\r\n                                                data-testid=\"element\"\r\n                                                onClick={handleToggle({ id })}\r\n                                                style={{\r\n                                                    textDecoration: state === 'finished' ?\r\n                                                        'line-through' :\r\n                                                        'none'\r\n                                                }}>\r\n                                                <div className=\"text\">\r\n                                                    {text}\r\n                                                </div>\r\n                                            </button>\r\n                                        </span>\r\n                                        <button className=\"close\"\r\n                                            onClick={handleDelete({ id })}>\r\n                                            <span>×</span>\r\n                                        </button>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            </CSSTransition>\r\n                        )\r\n                    })}\r\n\r\n                </TransitionGroup>\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleFilter } from '../todos/todosSlice';\r\n\r\nconst filter = [['all', 'All list'], ['active', 'Need to buy'], ['finished', 'Done']]\r\nconst TodoFilter = () => {\r\n    const activeFilter = useSelector(state => state.tasks.currentNameFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    const filterList = (state) => (e) => {\r\n        e.preventDefault();\r\n        dispatch(toggleFilter(state));\r\n    }\r\n    return (\r\n        <div className=\"mt-5 d-flex justify-content-around\">\r\n            {filter.map(([state, filter]) => (\r\n                <React.Fragment key={state}>\r\n                    {<button\r\n                        onClick={filterList(state)}\r\n                        className=\"card-btn\">\r\n                        <h5 style={{\r\n                            transform: state === activeFilter ?\r\n                                `scale(1.2)` :\r\n                                `scale(1)`\r\n                        }}>{filter}</h5>\r\n                    </button>}\r\n                </React.Fragment>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoFilter;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport TodoList from './TodoList';\r\nimport '../../assets/todo.scss'\r\nimport TodoFilter from '../filter/TodoFilter';\r\nimport {\r\n    updateText,\r\n    addTask,\r\n} from './todosSlice';\r\n\r\nconst Todo = () => {\r\n    const text = useSelector(state => state.text);\r\n    const dispatch = useDispatch();\r\n    const handleClick = (task) => (e) => {\r\n        e.preventDefault();\r\n        dispatch(addTask(task));\r\n        // console.log(local);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        dispatch(updateText(e.target.value))\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row d-flex position\">\r\n                <div className=\"card card-size m-auto\" style={{ width: '100%' }}>\r\n                    <div className=\"card-body card-background\">\r\n                        <div className=\"card-title text-center\">\r\n                            <h2>Your personal shopping list</h2>\r\n                            <TodoFilter />\r\n                        </div>\r\n                        <TodoList />\r\n                        <form className=\"input-group mb-3\" onSubmit={handleClick(text)}>\r\n                            <input type=\"text\" data-testid='input' className=\"form-control\" value={text} onChange={handleChange} required placeholder=\"Input the value...\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\r\n                            <div className=\"input-group-append\">\r\n                                <button className=\"btn btn-outline-primary\" type=\"submit\">add to list</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Todo;","\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    }\r\n    catch (e) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState)\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import React from 'react'\r\nimport Todo from '../features/todos/Todo';\r\nimport { loadState, saveState } from './loadState.js'\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport _ from 'lodash'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../assets/app.scss'\r\nimport rootReducer from '../features/todos/todosSlice';\r\nconst persistState = loadState();\r\nconsole.log(loadState())\r\nexport const store = configureStore({ reducer: rootReducer, preloadedState: persistState });\r\n\r\nstore.subscribe(_.throttle(() => {\r\n  saveState(store.getState())\r\n}, 1000))\r\n// console.log(store.getState())\r\nconst App = () => (\r\n  <div data-testid=\"app\" className=\"mt-md-5\">\r\n    <Todo />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\n// import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport { store } from './components/App'\r\n\r\n// console.log(store);\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}